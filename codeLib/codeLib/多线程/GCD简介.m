//
//  GCD.m
//  codeLib
//
//  Created by ftxbird on 14-6-7.
//  Copyright (c) 2014年 ftxbird. All rights reserved.
//

/**
 *  GCD简介
 */
//GCD可以极大的简化并行编程的方式，将底层的多线程交由系统去管理，这样可以充分利用多核硬件，提高程序的执行效率。

/**GCD提供很多超越传统多线程编程的优势：

a.易用: GCD比之thread更加简单易用。由于GCD基于工作单元（work unit）而非像thread那样基于运算，所以GCD可以控制诸如等待任务结束、监视文件描述符、周期执行代码以及工作挂起等任务。作为程序员只要一心关注自己的业务逻辑，可以从繁杂的线程管理的工作中解放出来。基于block的血统导致它能极为简单，可以在不同代码作用域之间传递上下文（闭包特性）。


b.高效率: GCD被实现得如此轻量和优雅，使得它在很多地方比之专门创建消耗资源的线程更实用且快速。这关系到易用性：导致GCD易用的原因有一部分在于你可以不用担心太多的效率问题而仅仅使用它就行了。


c.高性能: GCD自动根据系统负载（比例内存使用情况、CPU个数）来增减线程数量，它甚至可以在一个线程中实现多任务的并发，这就减少了上下文切换带来的开销，增加了计算效率。


注意：1.GCD的层次比线程高，其底层是利用多线程来实现的，苹果将线程交给了系统去管理，这样任务的管理和执行比起线程来更加高效。
     2.使用者要做的是定义自己Task任务，然后将其放到合适的分发队列去执行。
     3.可以将GCD看作是一种更加轻量级的线程，类似于golang中的协程的概念。GCD的本质是在操作系统层面提供提供并行调度的，这样任务的切换效率要远高于内核的切换效率，它的大部分功能实在运行库里实现的。
 
 GCD的基本概念就是dispatch queue。dispatch queue是一个对象，它可以接受任务，并将任务以先到先执行（FIFO）的顺序来执行。dispatch queue可以是并发的或串行的。并发任务会像NSOperationQueue那样基于系统负载来合适地并发进行，串行队列同一时间只执行单一任务。
 
 
 GCD中有三种队列类型：
 
 
 1.Main Queue 主队列(UI队列）: 与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。main queue可以调用dispatch_get_main_queue()来获得。因为main queue是与主线程相关的，所以这是一个串行队列。
 2.Global Queue 全局队列(并发队列):可以同时执行一个或多个任务，而且这些队列是由整个进程共享。进程中默认会自动创建三个全局队列：高、中（默认）、低三个优先级队列。可以调用dispatch_get_global_queue函数传入优先级来访问队列。
 3.Serial Qeue 用户自定义队列: 有两种，一种是自定义串行队列，一次只能执行一个任务；一种是自定义并行队列，可以并行执行多个任务。
 */

